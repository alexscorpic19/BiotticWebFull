name: Deploy BiotticWebFull to VPS

on:
  push:
    branches:
      - main # O la rama que uses para producción

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/Dockerfile.backend
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/biottic-backend:${{ github.sha }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/Dockerfile.frontend
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/biottic-frontend:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Prepare backend .env file
        id: create_backend_env
        run: |
          {
            echo "MONGODB_URI=\"${{ secrets.MONGO_URI }}\""
            echo "JWT_SECRET=\"${{ secrets.JWT_SECRET }}\""
            echo "PORT=5000"
            echo "NODE_ENV=production"
            echo "WOMPI_PUBLIC_KEY=\"${{ secrets.WOMPI_PUBLIC_KEY }}\""
            echo "WOMPI_PRIVATE_KEY=\"${{ secrets.WOMPI_PRIVATE_KEY }}\""
            echo "WOMPI_EVENTS_SECRET=\"${{ secrets.WOMPI_EVENTS_SECRET }}\""
            echo "WOMPI_INTEGRITY_SECRET=\"${{ secrets.WOMPI_INTEGRITY_SECRET }}\""
          } > .env.backend
          echo "backend_env_b64=$(base64 -w 0 .env.backend)" >> $GITHUB_OUTPUT

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            # Exportar variables de entorno de forma segura
            export BACKEND_ENV_B64='${{ steps.create_backend_env.outputs.backend_env_b64 }}'
            export GHCR_PAT='${{ secrets.GHCR_PAT }}'
            export GITHUB_REPO_OWNER='${{ github.repository_owner }}'
            export IMAGE_TAG='${{ github.sha }}'

            set -e # Falla el script si cualquier comando falla
            PROJECT_DIR="/home/deployer/biottic-web-app"

            # Clonar o actualizar el repositorio de forma robusta
            if [ -d "$PROJECT_DIR/.git" ]; then
              echo "Repository exists, pulling changes..."
              cd "$PROJECT_DIR"
              git pull
            else
              echo "Repository does not exist, cloning fresh..."
              rm -rf "$PROJECT_DIR"
              git clone https://github.com/alexscorpic19/BiotticWebFull.git "$PROJECT_DIR"
              cd "$PROJECT_DIR"
            fi

            # Decodificar y crear los archivos .env a partir de Base64
            echo $BACKEND_ENV_B64 | base64 -d > ./backend/.env

            # --- DEBUGGING ---
            echo "--- DEBUG INFO ---"
            echo "Debug: The GITHUB_REPO_OWNER is: '$GITHUB_REPO_OWNER'"
            echo "Debug: The IMAGE_TAG is: '$IMAGE_TAG'"
            echo "Debug: Is GHCR_PAT set? (first 5 chars): '${GHCR_PAT:0:5}'"
            echo "--- END DEBUG INFO ---"

            # Crear .env para docker-compose de forma explícita
            echo "IMAGE_TAG=$IMAGE_TAG" > ./deployment/docker-compose.env

            # Iniciar sesión en GHCR en el VPS usando el PAT
            echo "Logging into GHCR..."
            echo $GHCR_PAT | docker login ghcr.io -u $GITHUB_REPO_OWNER --password-stdin

            # Detener y eliminar los contenedores antiguos para liberar los puertos
            echo "Stopping existing services to free up ports..."
            docker compose -f deployment/docker-compose.yml down

            # Usar "docker compose" con la bandera --env-file para máxima fiabilidad
            echo "Pulling new images..."
            docker compose --env-file ./deployment/docker-compose.env -f deployment/docker-compose.yml pull
            echo "Starting services..."
            docker compose --env-file ./deployment/docker-compose.env -f deployment/docker-compose.yml up -d --remove-orphans
            echo "Deployment finished."